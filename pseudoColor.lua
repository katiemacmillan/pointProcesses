
local color = require "il.color"
-- pseudocolor color map
local colorMap = {
  {0, 0, 0},
  {0, 0, 7},
  {0, 0, 14},
  {0, 0, 21},
  {0, 0, 28},
  {0, 0, 35},
  {0, 0, 42},
  {0, 0, 49},
  {0, 0, 56},
  {0, 0, 63},
  {0, 0, 70},
  {0, 0, 77},
  {0, 0, 84},
  {0, 0, 91},
  {0, 0, 98},
  {0, 0, 105},
  {0, 0, 112},
  {0, 0, 119},
  {0, 0, 126},
  {0, 0, 133},
  {0, 0, 140},
  {0, 0, 147},
  {0, 0, 154},
  {0, 0, 161},
  {0, 0, 168},
  {0, 0, 175},
  {0, 0, 182},
  {0, 0, 189},
  {0, 0, 196},
  {0, 0, 203},
  {0, 0, 210},
  {0, 0, 217},
  {0, 0, 224},
  {0, 0, 231},
  {0, 0, 238},
  {0, 0, 245},
  {0, 0, 252},
  {0, 0, 255},
  {0, 7, 255},
  {0, 14, 255},
  {0, 21, 255},
  {0, 28, 255},
  {0, 35, 255},
  {0, 42, 255},
  {0, 49, 255},
  {0, 56, 255},
  {0, 63, 255},
  {0, 70, 255},
  {0, 77, 255},
  {0, 84, 255},
  {0, 91, 255},
  {0, 98, 255},
  {0, 105, 255},
  {0, 112, 255},
  {0, 119, 255},
  {0, 126, 255},
  {0, 133, 255},
  {0, 140, 255},
  {0, 147, 255},
  {0, 154, 255},
  {0, 161, 255},
  {0, 168, 255},
  {0, 175, 255},
  {0, 182, 255},
  {0, 189, 255},
  {0, 196, 255},
  {0, 203, 255},
  {0, 210, 255},
  {0, 217, 255},
  {0, 224, 255},
  {0, 231, 255},
  {0, 238, 255},
  {0, 245, 255},
  {0, 252, 255},
  {0, 255, 248},
  {0, 255, 241},
  {0, 255, 234},
  {0, 255, 227},
  {0, 255, 220},
  {0, 255, 213},
  {0, 255, 206},
  {0, 255, 199},
  {0, 255, 192},
  {0, 255, 185},
  {0, 255, 178},
  {0, 255, 171},
  {0, 255, 164},
  {0, 255, 157},
  {0, 255, 150},
  {0, 255, 143},
  {0, 255, 136},
  {0, 255, 129},
  {0, 255, 122},
  {0, 255, 115},
  {0, 255, 108},
  {0, 255, 101},
  {0, 255, 94},
  {0, 255, 87},
  {0, 255, 80},
  {0, 255, 73},
  {0, 255, 66},
  {0, 255, 59},
  {0, 255, 52},
  {0, 255, 45},
  {0, 255, 38},
  {0, 255, 31},
  {0, 255, 24},
  {0, 255, 17},
  {0, 255, 10},
  {0, 255, 3},
  {0, 255, 0},
  {7, 255, 0},
  {14, 255, 0},
  {21, 255, 0},
  {28, 255, 0},
  {35, 255, 0},
  {42, 255, 0},
  {49, 255, 0},
  {56, 255, 0},
  {63, 255, 0},
  {70, 255, 0},
  {77, 255, 0},
  {84, 255, 0},
  {91, 255, 0},
  {98, 255, 0},
  {105, 255, 0},
  {112, 255, 0},
  {119, 255, 0},
  {126, 255, 0},
  {133, 255, 0},
  {140, 255, 0},
  {147, 255, 0},
  {154, 255, 0},
  {161, 255, 0},
  {168, 255, 0},
  {175, 255, 0},
  {182, 255, 0},
  {189, 255, 0},
  {196, 255, 0},
  {203, 255, 0},
  {210, 255, 0},
  {217, 255, 0},
  {224, 255, 0},
  {231, 255, 0},
  {238, 255, 0},
  {245, 255, 0},
  {252, 255, 0},
  {255, 248, 0},
  {255, 241, 0},
  {255, 234, 0},
  {255, 227, 0},
  {255, 220, 0},
  {255, 213, 0},
  {255, 206, 0},
  {255, 199, 0},
  {255, 192, 0},
  {255, 185, 0},
  {255, 178, 0},
  {255, 171, 0},
  {255, 164, 0},
  {255, 157, 0},
  {255, 150, 0},
  {255, 143, 0},
  {255, 136, 0},
  {255, 129, 0},
  {255, 122, 0},
  {255, 115, 0},
  {255, 108, 0},
  {255, 101, 0},
  {255, 94, 0},
  {255, 87, 0},
  {255, 80, 0},
  {255, 73, 0},
  {255, 66, 0},
  {255, 59, 0},
  {255, 52, 0},
  {255, 45, 0},
  {255, 38, 0},
  {255, 31, 0},
  {255, 24, 0},
  {255, 17, 0},
  {255, 10, 0},
  {255, 3, 0},
  {255, 0, 0},
  {255, 0, 7},
  {255, 0, 14},
  {255, 0, 21},
  {255, 0, 28},
  {255, 0, 35},
  {255, 0, 42},
  {255, 0, 49},
  {255, 0, 56},
  {255, 0, 63},
  {255, 0, 70},
  {255, 0, 77},
  {255, 0, 84},
  {255, 0, 91},
  {255, 0, 98},
  {255, 0, 105},
  {255, 0, 112},
  {255, 0, 119},
  {255, 0, 126},
  {255, 0, 133},
  {255, 0, 140},
  {255, 0, 147},
  {255, 0, 154},
  {255, 0, 161},
  {255, 0, 168},
  {255, 0, 175},
  {255, 0, 182},
  {255, 0, 189},
  {255, 0, 196},
  {255, 0, 203},
  {255, 0, 210},
  {255, 0, 217},
  {255, 0, 224},
  {255, 0, 231},
  {255, 0, 238},
  {255, 0, 245},
  {255, 0, 252},
  {255, 0, 255},
  {255, 7, 255},
  {255, 14, 255},
  {255, 21, 255},
  {255, 28, 255},
  {255, 35, 255},
  {255, 42, 255},
  {255, 49, 255},
  {255, 56, 255},
  {255, 63, 255},
  {255, 70, 255},
  {255, 77, 255},
  {255, 84, 255},
  {255, 91, 255},
  {255, 98, 255},
  {255, 105, 255},
  {255, 112, 255},
  {255, 119, 255},
  {255, 126, 255},
  {255, 133, 255},
  {255, 140, 255},
  {255, 147, 255},
  {255, 154, 255},
  {255, 161, 255},
  {255, 168, 255},
  {255, 175, 255},
  {255, 182, 255},
  {255, 189, 255},
  {255, 196, 255},
  {255, 203, 255},
  {255, 210, 255},
  {255, 217, 255},
  {255, 224, 255},
  {255, 231, 255},
  {255, 238, 255},
  {255, 245, 255},
}
local function pseudoColorLUT(levels, specify)
  local lut = {}
  local zones = math.floor((256/levels) + 0.5)
  local cm = 1
 
 if specify then
    math.randomseed(os.time())
    local rand = math.random()*1000
    cm = (math.floor(rand+0.5))%256
  end
  
  local i = 1
  while i < 257 do
    local j = 0
    while j < zones do
      lut[i] = colorMap[cm]
      j = j + 1
      i = i+1
    end
    cm = (cm + zones)%256
  end
  
  return lut
end

local function logarithmicLUT()
  local lut = {}
  local c = (255/(math.log(255)))
  print(c)
  for i = 1, 256 do
    lut[i] = math.floor((c*(math.log(i)))+0.5)
    if lut[i] > 255 then lut[i] = 255 end
    print(lut[i])
  end
  
  
  return lut
end
-- create & return a histogram of an image
local function pseudoColor( img, levels )
  local specify = true
  if levels == nil then 
    levels = 8
    specify = false
  end
  -- get number of rows and columns in image
  local nrows, ncols = img.height, img.width
  local LUT = pseudoColorLUT(levels, specify)
  local temp = img:clone()
  temp = color.RGB2YIQ(temp)
  -- for each pixel in the image
  for r = 0, nrows-1 do
    for c = 0, ncols-1 do
      local i = img:at(r,c).y
      for ch = 0, 2 do
        img:at(r,c).rgb[ch] = LUT[i+1][ch + 1]
        end      
    end
  end  
  -- return the histogram array
  return img
end


-- create & return a histogram of an image
local function continuousColor(img)  
  -- get number of rows and columns in image
  local nrows, ncols = img.height, img.width
  local temp = img:clone()
  temp = color.RGB2YIQ(temp)
  -- for each pixel in the image
  for r = 0, nrows-1 do
    for c = 0, ncols-1 do
      local i = img:at(r,c).y
      for ch = 0, 2 do
        img:at(r,c).rgb[ch] = colorMap[i+1][ch + 1]
        end      
    end
  end  
  -- return the histogram array
  return img
end



local function logCompression(img)
  local nrows, ncols = img.height, img.width
  local temp = img:clone()
  local LUT = logarithmicLUT()
  temp = color.RGB2YIQ(temp)
  -- for each pixel in the image
  for r = 0, nrows-1 do
    for c = 0, ncols-1 do
      local i = temp:at(r,c).y
        temp:at(r,c).y = LUT[i+1]
       -- print(temp:at(r,c).y)
    end
  end  
  -- return the histogram array
  return color.YIQ2RGB(temp)
end

------------------------------------
-------- exported routines ---------
------------------------------------

return {
  pseudoColor = pseudoColor,
  continuousColor = continuousColor,
  logCompression = logCompression
}
